@inject Model.Game Game;

<div class="row align-items-center">
    <CardButton OnClick="ButtonOnClick"
                Enabled="ButtonEnabled"
                CssClass="col-8 ms-3">
        @ChildContent
    </CardButton>
    <CardUpDownArrows OnClickUp="UpOnClick"
                      OnClickDown="DownOnClick"
                      EnabledUp="UpEnabled"
                      EnabledDown="DownEnabled" />
</div>
<CardInput @bind-Input="InputPropagation"
           MinValue="InputMinValue"
           Value="Input"
           MaxValue="InputMaxValue"
           Enabled="UpEnabled || DownEnabled" />

@code
{
    #region Action Button

    [Parameter, EditorRequired]
    public EventCallback<MouseEventArgs> ButtonOnClick { get; set; }

    [Parameter, EditorRequired]
    public bool ButtonEnabled { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    #endregion

    #region Up & Down Arrows

    [Parameter, EditorRequired]
    public EventCallback<MouseEventArgs> UpOnClick { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<MouseEventArgs> DownOnClick { get; set; }

    [Parameter, EditorRequired]
    public bool UpEnabled { get; set; }

    [Parameter, EditorRequired]
    public bool DownEnabled { get; set; }

    #endregion

    #region Range Input
    
    [Parameter, EditorRequired]
    public int InputMaxValue { get; set; }
    
    [Parameter, EditorRequired]
    public int InputMinValue { get; set; }

    #region Input binding handling

    // Logic in this region follows the "Bind across more than two components" pattern:
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-7.0#bind-across-more-than-two-components

    [Parameter]
    public int Input { get; set; }
    
    [Parameter]
    public EventCallback<int> InputChanged { get; set; }
    
    private async Task OnInputChanged(ChangeEventArgs e)
    {
        int value = int.Parse(e.Value?.ToString() ?? string.Empty);
        await InputChanged.InvokeAsync(value);
    }

    private int InputPropagation
    {
        get => Input;
        set => InputChanged.InvokeAsync(value);
    }

    #endregion
    
    #endregion
}
